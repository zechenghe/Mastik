{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15280\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 The attack program is spy. \'a0The memory probing code is in probe.c, cachemap.c generates a map of the cache, pageset.c manages list of pages within the memory managed by probe.c. \
\
For running the attack on Linux do:\
* Set the machine to have a few large pages (at least double the size of your L3 cache)\
* Download the source and build GnuPG-1.4.13, using the default config\
* Use gdb to get the address of line 256 in mul/mpih-mul.c. \'a0The command I use is: 
\f1 info line mpih-mul.c:256
\f0 \
* Create a 3072 bits gpg ElGamal key. (Use 
\f1 gpg --genkey
\f0 )\
* Encrypt a short file with the key. (use 
\f1 gpg -e <file> -o <outputfile>
\f0 )\
* Create a script that continuously executed 
\f1 gpg -d <outfile>
\f0  . You may want to redirect output to 
\f1 /dev/null
\f0 .\
* Use CPU affinity to execute the script on one core.\
* Use CPU affinity to run the attack program on another core. \'a0The attack program takes the address from the third bullet above as a single command line argument\'a0\
* You should get a large set of numbers on the screen, and after a few minutes the program should finish.\
* The output is in the file 
\f1 out
\f0  in the directory you run the spy program in. \'a0I can analyse the file, or, hopefully, should be able to write some software to do that.\
\
\
\'a0I added a program to analyse the output. \'a0To use, run\'a0
\f1 ./analyse 00000111110000001111100000 < out
\f0 \
You would, hopefully, get an output like:\
\
Match on 97 (97) - 319\
Match on 609 (97) - 321\
Match on 737 (97) - 366\
Match on 865 (97) - 397\
Match on 2785 (97) - 289\
Match on 2913 (97) - 383\
Match on 3041 (97) - 391\
Match on 3169 (97) - 355\
Match on 4321 (97) - 391\
Match on 4449 (97) - 388\
\
The first number is the number of a line in out that seems to capture the victim Square. \'a0The number in parenthesis is the line number modulo 128 (number of colours in the LLC). \'a0If you have several different numbers, pick the one that appears the most. \'a0The third number indicates \'a0how likely this is to be a match - the higher the better.\
\
The search pattern is likely to be architecture dependent. \'a0If you do not get any reasonable output, try the following arguments: 000011110000011110000, 000001111100000, 000011110000. I cannot guarantee that any would work. \'a0These are just guesses.}